# -*- coding: utf-8 -*-
"""RAG_bot_prototype_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PM0gSwJ-wZ9qtKqmpQ1BPFdJfTLFk4Re
"""

import pandas as pd
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
from sentence_transformers import SentenceTransformer, util

df = pd.read_csv("college_3.0.csv")
df = df.dropna(subset=['Name', 'Location', 'Majors_Offered'])
df["full_text"] = df.apply(
    lambda row: f"Name: {row['Name']}. Location: {row['Location']}. Majors: {row['Majors_Offered']}. Hostel: {row.get('Hostel', 'Not specified')}.",
    axis=1
)

# embedding
embedder = SentenceTransformer("all-MiniLM-L6-v2")
corpus_embeddings = embedder.encode(df["full_text"].tolist(), convert_to_tensor=True)

# Load model
from huggingface_hub import login
login()

model_id = "mistralai/Mistral-7B-Instruct-v0.3"
tokenizer = AutoTokenizer.from_pretrained(model_id)
model = AutoModelForCausalLM.from_pretrained(
    model_id,
    device_map="auto",
    torch_dtype=torch.float16
)
generator = pipeline("text-generation", model=model, tokenizer=tokenizer)

def answer_query(query):
    query_embedding = embedder.encode(query, convert_to_tensor=True)
    similarity_scores = util.pytorch_cos_sim(query_embedding, corpus_embeddings)[0]
    top_results = torch.topk(similarity_scores, k=5)
    top_texts = [df["full_text"][i] for i in top_results[1]]
    context = "\n".join(top_texts)
    prompt = f"Answer the following question using only the information provided below. Give a detailed, clear, and friendly answer within 100 words.\n\nContext:\n{context}\n\nQuestion: {query}\n\nAnswer:"
    response = generator(prompt, max_new_tokens=150, do_sample=True, temperature=0.7)[0]['generated_text']
    answer_start = response.find("Answer:") + len("Answer:")
    return response[answer_start:].strip()

print("Welcome to the College Info Chatbot...type 'exit' to quit.\n")

while True:
    user_input = input("You: ")
    if user_input.lower() in ["exit", "quit"]:
        print("Bot: Goodbye!")
        break
    try:
        response = answer_query(user_input)
        print(f"Bot: {response}\n")
    except Exception as e:
        print(f"Bot: Sorry, an error occurred: {e}\n")